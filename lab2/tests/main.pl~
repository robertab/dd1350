:- use_module(library(lists)).

% Load model, initial state and formula from file.
verify(Input) :-
    see(Input), read(T), read(L), read(S), read(F), seen,
    check(T, L, S, [], F).

% check(T, L, S, U, F)
%   T - The transitions in form of adjacency lists
%   L - The labeling
%   S - Current state
%   U - Currently recorded states
%   F - CTL Formula to check.
%
%   Should evaluate to true iff the sequent below is valid.
%   (T,L), S |-F
%             U

chk_neighbours_all(T, L, S, U, F) :-
    member([S, N], T),
    chk_lst_all(T, L, U, F, N).

chk_lst_all(_, _, _, _, []).
chk_lst_all(T, L, U, F, [H|Tl]) :-
    check(T, L, H, U, F),
    chk_lst_all(T, L, U, F, Tl).

chk_neighbours_some(T, L, S, U, F) :-
    member([S, N], T),
    chk_lst_some(T, L, U, F, N).

chk_lst_some(T, L, U, F, [H|Tl]) :-
    check(T, L, H, U, F);
    chk_lst_some(T, L, U, F, Tl).

check(_, L, S, [], X) :-
    member([S, A], L),
    member(X, A).

check(_, L, S, [], neg(X)) :-
    member([S, A], L),
    \+ member(X, A).

check(T, L, S, [], and(F,G)) :-
    check(T, L, S, [], F),
    check(T, L, S, [], G).

check(T, L, S, [], or(F,G)) :-
    check(T, L, S, [], F);
    check(T, L, S, [], G).

check(T, L, S, [], ax(F)) :-
    chk_neighbours_all(T, L, S, [], F).

check(_, _, S, U, ag(_)) :-
    member(S, U).

check(T, L, S, U, ag(F)) :-
    \+ member(S, U),
    check(T, L, S, [], F),
    chk_neighbours_all(T, L, S, [S|U], ag(F)).

check(T, L, S, U, af(F)) :-
    \+ member(S, U),
    check(T, L, S, [], F).

check(T, L, S, U, af(F)) :-
    \+ member(S, U),
    chk_neighbours_all(T, L, S, [S|U], af(F)).

check(T, L, S, [], ex(F)) :-
    chk_neighbours_some(T, L, S, [], F).

check(_, _, S, U, eg(_)) :-
    member(S, U).

check(T, L, S, U, eg(F)) :-
    \+ member(S, U),
    check(T, L, S, [], F),
    chk_neighbours_some(T, L, S, [S|U], eg(F)).

check(T, L, S, U, ef(F)) :-
    \+ member(S,U),
    check(T, L, S, [], F).

check(T, L, S, U, ef(F)) :-
    \+ member(S,U),
    chk_neighbours_some(T, L, S, [S|U], ef(F)).
